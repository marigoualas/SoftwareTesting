package test.st1920.automaton;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make3();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        st1920.automaton.RegExpMatcher regExpMatcher0 = new st1920.automaton.RegExpMatcher();
        java.lang.Class<?> wildcardClass1 = regExpMatcher0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        boolean boolean2 = st1920.automaton.RegExpMatcher.matches("hi!", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        st1920.automaton.REstring rEstring0 = st1920.automaton.RegExpMatcher.makeAnyChar();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring0);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        java.lang.Class<?> wildcardClass2 = rEstring1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeW();
        java.lang.Class<?> wildcardClass1 = matchString0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeAnd(matchString1, matchString4);
        st1920.automaton.MatchString matchString6 = null;
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeAnd(matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = st1920.automaton.RegExpMatcher.matches(matchString1, rEstring10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: integer expected at position 5");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString1);
        java.lang.Class<?> wildcardClass3 = matchString1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeU();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        java.lang.Class<?> wildcardClass2 = rEstring1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString1);
        java.lang.Class<?> wildcardClass3 = rEstring2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        boolean boolean2 = st1920.automaton.RegExpMatcher.matches("", "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString6);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        st1920.automaton.REstring rEstring0 = st1920.automaton.RegExpMatcher.makeAnything();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring0);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeString(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        java.lang.Class<?> wildcardClass4 = matchString0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        boolean boolean2 = st1920.automaton.RegExpMatcher.matches("hi!", "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        boolean boolean2 = st1920.automaton.RegExpMatcher.matches("", "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString6);
        java.lang.Class<?> wildcardClass10 = matchString0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString6, matchString7);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = st1920.automaton.RegExpMatcher.matches(matchString4, rEstring8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: interval syntax error at position 74");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeAnd(matchString1, matchString4);
        st1920.automaton.MatchString matchString6 = null;
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNot(matchString6);
        boolean boolean10 = st1920.automaton.RegExpMatcher.matches(matchString1, rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString4);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeN();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        java.lang.Class<?> wildcardClass5 = rEstring4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.MatchString matchString2 = null;
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeAnd(matchString2, matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNot(matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString3, matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makePattern(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeAlpha();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        java.lang.Class<?> wildcardClass4 = rEstring3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOr(matchString2, matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString2);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.MatchString matchString1 = null;
        // The following exception was thrown during execution in test generation
        try {
            st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOr(matchString2, matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeAnd(matchString7, matchString8);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString8);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString12);
        java.lang.Class<?> wildcardClass15 = matchString12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeString(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString2 = null;
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString2, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRange(matchString3, matchString5);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString5);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeAnd(matchString9, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString5, matchString10);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeP();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeString(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString1);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeB();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString7, matchString9);
        java.lang.Class<?> wildcardClass11 = rEstring10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.MatchString matchString7 = null;
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString7, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRange(matchString8, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: interval syntax error at position 76");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeB();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString7, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString14 = null;
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString14, matchString15);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRange(matchString15, matchString17);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString17);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString22);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeAnd(matchString21, matchString22);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString17, matchString22);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString13, matchString22);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString11, matchString12, matchString13);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeOccurences(matchString13, matchString28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = st1920.automaton.RegExpMatcher.matches(matchString9, rEstring29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: integer expected at position 38");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString3);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString10, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString2, matchString11);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString1, matchString2);
        java.lang.Class<?> wildcardClass17 = matchString0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeAndSymbol();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeAnd(matchString1, matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNot(matchString2);
        boolean boolean5 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make4();
        java.lang.Class<?> wildcardClass1 = matchString0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeAndSymbol();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makePattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        java.lang.Class<?> wildcardClass2 = rEstring1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString4);
        st1920.automaton.MatchString matchString6 = null;
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeAnd(matchString6, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNot(matchString7);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString4, matchString7, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString10);
        java.lang.Class<?> wildcardClass13 = rEstring12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOr(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString5);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeString(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString14, matchString15);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOr(matchString11, matchString15);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString11);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString20, matchString21);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString10, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString2, matchString11);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString1, matchString2);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString19, matchString20);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString19);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString17);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString9);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString4);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeString(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString10, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString2, matchString11);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString1, matchString2);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString18);
        st1920.automaton.MatchString matchString21 = null;
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString21, matchString22);
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeRange(matchString22, matchString24);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRange(matchString18, matchString24);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString28);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString28);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString31, matchString32);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString18, matchString28, matchString33);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString17, matchString18);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString18);
        java.lang.Class<?> wildcardClass37 = matchString18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString9);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString9);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString9, matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeString(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makePattern(matchString0);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString2 = null;
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString2, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRange(matchString3, matchString5);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString5);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeAnd(matchString9, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString5, matchString10);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString1, matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString16);
        java.lang.Class<?> wildcardClass21 = matchString0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeK();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString3);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString3);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeAnd(matchString7, matchString8);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString8);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString15);
        st1920.automaton.MatchString matchString18 = null;
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString18, matchString19);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRange(matchString19, matchString21);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRange(matchString15, matchString21);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeNot(matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString28);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString27, matchString28);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString25, matchString27);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString21, matchString31);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeString(matchString31);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeOccurences(matchString12, matchString31);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeNot(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        boolean boolean4 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring3);
        st1920.automaton.MatchString matchString5 = null;
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeAnd(matchString2, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString7);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString10);
        st1920.automaton.MatchString matchString12 = null;
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeAnd(matchString12, matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeNot(matchString13);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString10, matchString13, matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString3, matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeEmpty();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makePattern(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeAnd(matchString2, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRange(matchString3, matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString4);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNot(matchString9);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString9, matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString12);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeString(matchString12);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurences(matchString8, matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString15, matchString16);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString19, matchString20);
        st1920.automaton.MatchString matchString23 = null;
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeAnd(matchString20, matchString23);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeAnd(matchString23, matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString15, matchString25, matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString5, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeNot(matchString27);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeNot(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString4, matchString7);
        // The following exception was thrown during execution in test generation
        try {
            st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString4);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.make7();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeAnd(matchString6, matchString7);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOr(matchString6, matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeB();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString4, matchString10, matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString12);
        st1920.automaton.MatchString matchString15 = null;
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString15, matchString16);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRange(matchString16, matchString18);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString18, matchString21, matchString22);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString21);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString25);
        boolean boolean27 = st1920.automaton.RegExpMatcher.matches(matchString21, rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurences(matchString8, matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString5);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeString(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeString(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeX();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeT();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeAnd(matchString11, matchString12);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString7, matchString12);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString12);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString2, matchString3);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString2);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeAnd(matchString7, matchString8);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString8);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeP();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeAnd(matchString13, matchString14);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString13);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString13);
        st1920.automaton.MatchString matchString19 = null;
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeAnd(matchString19, matchString20);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString19, matchString22);
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString13, matchString22);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString8, matchString13);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeAnd(matchString26, matchString27);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeRange(matchString27, matchString30);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString8, matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.REstring rEstring4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = st1920.automaton.RegExpMatcher.matches(matchString1, rEstring4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurences(matchString8, matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString18 = null;
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString18, matchString19);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRange(matchString19, matchString21);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString21);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeAnd(matchString25, matchString26);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString21, matchString26);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString26);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString15, matchString16, matchString17);
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeNot(matchString32);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString35);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString34, matchString35);
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString32, matchString34);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeNot(matchString32);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString15, matchString32);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString32);
        st1920.automaton.MatchString matchString42 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString43 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString43);
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString42, matchString43);
        st1920.automaton.MatchString matchString46 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString46);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        // The following exception was thrown during execution in test generation
        try {
            st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOr(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.MatchString matchString10 = null;
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString7, matchString9, matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeP();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeAnd(matchString13, matchString14);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString13);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString13);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString10, matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeX();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeT();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        java.lang.Class<?> wildcardClass3 = matchString1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString2 = null;
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString2, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRange(matchString3, matchString5);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString5);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeAnd(matchString9, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString5, matchString10);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString1, matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString16);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString21);
        st1920.automaton.MatchString matchString24 = null;
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString24, matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRange(matchString25, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRange(matchString21, matchString27);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeNot(matchString31);
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString34);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString33, matchString34);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString31, matchString33);
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString27, matchString37);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeString(matchString37);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurences(matchString16, matchString37);
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeString(matchString41);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString41);
        st1920.automaton.MatchString matchString44 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString45 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString45);
        st1920.automaton.REstring rEstring47 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString44, matchString45);
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeOr(matchString41, matchString45);
        st1920.automaton.MatchString matchString49 = null;
        st1920.automaton.MatchString matchString50 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeAnd(matchString49, matchString50);
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeNot(matchString50);
        st1920.automaton.MatchString matchString53 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring54 = st1920.automaton.RegExpMatcher.makeOr(matchString50, matchString53);
        st1920.automaton.REstring rEstring55 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString41, matchString53);
        boolean boolean56 = st1920.automaton.RegExpMatcher.matches(matchString37, rEstring55);
        st1920.automaton.MatchString matchString57 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring58 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString57);
        st1920.automaton.REstring rEstring59 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString57);
        st1920.automaton.MatchString matchString60 = null;
        st1920.automaton.MatchString matchString61 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring62 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString60, matchString61);
        st1920.automaton.MatchString matchString63 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring64 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString63);
        st1920.automaton.REstring rEstring65 = st1920.automaton.RegExpMatcher.makeRange(matchString61, matchString63);
        st1920.automaton.REstring rEstring66 = st1920.automaton.RegExpMatcher.makeRange(matchString57, matchString63);
        st1920.automaton.MatchString matchString67 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring68 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString67);
        st1920.automaton.REstring rEstring69 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString67);
        st1920.automaton.MatchString matchString70 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString71 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString72 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString70, matchString71);
        st1920.automaton.REstring rEstring73 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString57, matchString67, matchString72);
        st1920.automaton.MatchString matchString74 = st1920.automaton.RegExpMatcher.makeB();
        st1920.automaton.REstring rEstring75 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString67, matchString74);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = st1920.automaton.RegExpMatcher.matches(matchString37, rEstring75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: integer expected at position 38");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring75);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString13, matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString10, matchString15);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeAnd(matchString17, matchString18);
        st1920.automaton.MatchString matchString21 = null;
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString17, matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString2 = null;
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString2, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRange(matchString3, matchString5);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString5);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeAnd(matchString9, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString5, matchString10);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString1, matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString16);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString21);
        st1920.automaton.MatchString matchString24 = null;
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString24, matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRange(matchString25, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRange(matchString21, matchString27);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeNot(matchString31);
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString34);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString33, matchString34);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString31, matchString33);
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString27, matchString37);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeString(matchString37);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurences(matchString16, matchString37);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeNot(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString10, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString11);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString6);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeAnd(matchString16, matchString17);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString2, matchString17);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString17);
        // The following exception was thrown during execution in test generation
        try {
            st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        java.lang.Class<?> wildcardClass3 = matchString1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString6, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString6);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString5);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString8, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString9, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString15);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString18, matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString5, matchString15, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString23 = null;
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString5, matchString23, matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString1, matchString5);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString28);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makePattern(matchString28);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString9);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString4);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeAnd(matchString14, matchString15);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString15);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString15);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeOr(matchString20, matchString21);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeOr(matchString21, matchString23);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeNot(matchString25);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString25);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString29, matchString30);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeOccurences(matchString28, matchString31);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeOr(matchString25, matchString31);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString23, matchString25);
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString38 = null;
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString38, matchString39);
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString41);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeRange(matchString39, matchString41);
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString41);
        st1920.automaton.MatchString matchString45 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString46 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring47 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString46);
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeAnd(matchString45, matchString46);
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString41, matchString46);
        st1920.automaton.MatchString matchString50 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString37, matchString46);
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString35, matchString36, matchString37);
        st1920.automaton.MatchString matchString52 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeNot(matchString52);
        st1920.automaton.MatchString matchString54 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString55 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring56 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString55);
        st1920.automaton.REstring rEstring57 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString54, matchString55);
        st1920.automaton.MatchString matchString58 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString52, matchString54);
        st1920.automaton.REstring rEstring59 = st1920.automaton.RegExpMatcher.makeNot(matchString52);
        st1920.automaton.REstring rEstring60 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString35, matchString52);
        st1920.automaton.REstring rEstring61 = st1920.automaton.RegExpMatcher.makeOr(matchString23, matchString52);
        st1920.automaton.REstring rEstring62 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring62);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeN();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString11, matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString19 = null;
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString19, matchString20);
        st1920.automaton.MatchString matchString22 = null;
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeAnd(matchString19, matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeZ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOr(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString5);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeString(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString14, matchString15);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOr(matchString11, matchString15);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString11);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.MatchString matchString6 = null;
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString9);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRange(matchString12, matchString13);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOr(matchString15, matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString15);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString9, matchString12, matchString15);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurences(matchString1, matchString12);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString21);
        st1920.automaton.MatchString matchString24 = null;
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString24, matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRange(matchString25, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRange(matchString21, matchString27);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeNot(matchString31);
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString34);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString33, matchString34);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString31, matchString33);
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString27, matchString37);
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.MatchString matchString40 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeNot(matchString40);
        st1920.automaton.MatchString matchString42 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString43 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString43);
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString42, matchString43);
        st1920.automaton.MatchString matchString46 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString40, matchString42);
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString39, matchString46);
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeRange(matchString37, matchString47);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = st1920.automaton.RegExpMatcher.matches(matchString12, rEstring48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: interval syntax error at position 76");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurences(matchString8, matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString15, matchString16);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString19, matchString20);
        st1920.automaton.MatchString matchString23 = null;
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeAnd(matchString20, matchString23);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeAnd(matchString23, matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString15, matchString25, matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString5, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString2);
        st1920.automaton.MatchString matchString5 = null;
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString5, matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString6, matchString8);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString8);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString15, matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString2, matchString12, matchString17);
        st1920.automaton.MatchString matchString19 = null;
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeAnd(matchString19, matchString20);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString19, matchString22);
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString25);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString24, matchString25);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString29);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString28, matchString29);
        st1920.automaton.MatchString matchString32 = null;
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeAnd(matchString29, matchString32);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeAnd(matchString32, matchString34);
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString24, matchString34, matchString36);
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString2, matchString19, matchString24);
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString39);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString24, matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString6);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.MatchString matchString11 = null;
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeString(matchString11);
        boolean boolean13 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString4);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNot(matchString9);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString9, matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString15);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeX();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeT();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOr(matchString18, matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString19);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString19, matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString3);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makePattern(matchString9);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNot(matchString9);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeC();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString1, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOr(matchString6, matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeNot(matchString6);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString1, matchString6);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeString(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString15, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOr(matchString12, matchString16);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeAnd(matchString1, matchString12);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString12);
        java.lang.Class<?> wildcardClass22 = matchString21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString4, matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNot(matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString8);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString12, matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurences(matchString11, matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOr(matchString8, matchString14);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString6, matchString8);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString18, matchString19);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString22, matchString23);
        st1920.automaton.MatchString matchString26 = null;
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeAnd(matchString23, matchString26);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeAnd(matchString26, matchString28);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString18, matchString28, matchString30);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString8, matchString30);
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString34);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString34);
        st1920.automaton.MatchString matchString37 = null;
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString37, matchString38);
        st1920.automaton.MatchString matchString40 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString40);
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeRange(matchString38, matchString40);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeRange(matchString34, matchString40);
        st1920.automaton.MatchString matchString44 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString44);
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString44);
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString48 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString49 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString47, matchString48);
        st1920.automaton.REstring rEstring50 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString34, matchString44, matchString49);
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString33, matchString34);
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString34);
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString30, matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString11, matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString19 = null;
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString19, matchString20);
        st1920.automaton.MatchString matchString22 = null;
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeAnd(matchString22, matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeNot(matchString23);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurences(matchString1, matchString23);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeX();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeT();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString7);
        st1920.automaton.MatchString matchString10 = null;
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString10, matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRange(matchString11, matchString13);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString13);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString19, matchString20);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString19);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString13, matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString23);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString29 = null;
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString29, matchString30);
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString32);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeRange(matchString30, matchString32);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString32);
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString37);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeAnd(matchString36, matchString37);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString32, matchString37);
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString28, matchString37);
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString26, matchString27, matchString28);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeRange(matchString3, matchString26);
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurences(matchString2, matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeP();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString3, matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeH();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOr(matchString7, matchString9);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString13 = null;
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOr(matchString12, matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurences(matchString7, matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make0();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make4();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNot(matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString13);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString10, matchString12);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeNot(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString4);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNot(matchString9);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString9, matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString15);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeX();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeT();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOr(matchString18, matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString19);
        st1920.automaton.MatchString matchString22 = null;
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString22, matchString23);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString25);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRange(matchString23, matchString25);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString25);
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString30);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeAnd(matchString29, matchString30);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString25, matchString30);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString34);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeAnd(matchString25, matchString34);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString37);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString37);
        st1920.automaton.MatchString matchString40 = null;
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString40, matchString41);
        st1920.automaton.MatchString matchString43 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString43);
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeRange(matchString41, matchString43);
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeRange(matchString37, matchString43);
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeNot(matchString47);
        st1920.automaton.MatchString matchString49 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString50 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString50);
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString49, matchString50);
        st1920.automaton.MatchString matchString53 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString47, matchString49);
        st1920.automaton.REstring rEstring54 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString43, matchString53);
        st1920.automaton.REstring rEstring55 = st1920.automaton.RegExpMatcher.makeString(matchString53);
        st1920.automaton.REstring rEstring56 = st1920.automaton.RegExpMatcher.makeOccurences(matchString34, matchString53);
        st1920.automaton.REstring rEstring57 = st1920.automaton.RegExpMatcher.makeRange(matchString19, matchString53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring57);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString10, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString11);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString6);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeAnd(matchString16, matchString17);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString2, matchString17);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString24 = null;
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString24, matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRange(matchString25, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString27);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString32);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeAnd(matchString31, matchString32);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString27, matchString32);
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString23, matchString32);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString21, matchString22, matchString23);
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeOccurences(matchString23, matchString38);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString2, matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString4, matchString5);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeAnd(matchString5, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString10, matchString12);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeAnd(matchString12, matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeZ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makePattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString9);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString9);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString14, matchString15);
        st1920.automaton.MatchString matchString18 = null;
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString18);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeAnd(matchString18, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeString(matchString18);
        boolean boolean23 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring22);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makePattern(matchString0);
        java.lang.Class<?> wildcardClass3 = rEstring2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.make0();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString2, matchString3);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString2);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString2);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString1);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOr(matchString7, matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNot(matchString7);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        java.lang.Class<?> wildcardClass3 = matchString0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNot(matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString13);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString10, matchString12);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString16);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString18);
        st1920.automaton.MatchString matchString21 = null;
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString21, matchString22);
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeRange(matchString22, matchString24);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRange(matchString18, matchString24);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString6, matchString18);
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString29);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeRange(matchString28, matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOr(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString5);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeString(matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString13);
        boolean boolean15 = st1920.automaton.RegExpMatcher.matches(matchString11, rEstring14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString11, matchString16);
        st1920.automaton.MatchString matchString20 = null;
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeAnd(matchString20, matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeNot(matchString21);
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOr(matchString21, matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOr(matchString16, matchString21);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make0();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString1, matchString2);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString1);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString7);
        st1920.automaton.MatchString matchString10 = null;
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString10, matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRange(matchString11, matchString13);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString13);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString19, matchString20);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString19);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString13, matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeString(matchString23);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString23);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeR();
        java.lang.Class<?> wildcardClass1 = matchString0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOr(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString5);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeString(matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString13);
        boolean boolean15 = st1920.automaton.RegExpMatcher.matches(matchString11, rEstring14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString11, matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeH();
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString22);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString21, matchString22);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString25, matchString26);
        st1920.automaton.MatchString matchString29 = null;
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeAnd(matchString26, matchString29);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeAnd(matchString29, matchString31);
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString21, matchString31, matchString33);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeRange(matchString20, matchString31);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeOr(matchString16, matchString31);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makePattern(matchString2);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeB();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString7, matchString9);
        st1920.automaton.MatchString matchString11 = null;
        st1920.automaton.MatchString matchString12 = null;
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString12, matchString13);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRange(matchString13, matchString15);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString15, matchString18, matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString7, matchString11, matchString19);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeString(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeX();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString2, matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurences(matchString1, matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeString(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString7);
        st1920.automaton.MatchString matchString11 = null;
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString11, matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeNot(matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOr(matchString12, matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString15);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeString(matchString15);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString15);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeString(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString20);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRange(matchString15, matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString9);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString9);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString9, matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurences(matchString8, matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString18 = null;
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString18, matchString19);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRange(matchString19, matchString21);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString21);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeAnd(matchString25, matchString26);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString21, matchString26);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString26);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString15, matchString16, matchString17);
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeNot(matchString32);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString35);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString34, matchString35);
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString32, matchString34);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeNot(matchString32);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString15, matchString32);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString32);
        st1920.automaton.MatchString matchString42 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString43 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString44 = null;
        st1920.automaton.MatchString matchString45 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString44, matchString45);
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString47);
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeRange(matchString45, matchString47);
        st1920.automaton.REstring rEstring50 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString47);
        st1920.automaton.MatchString matchString51 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString52 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString52);
        st1920.automaton.REstring rEstring54 = st1920.automaton.RegExpMatcher.makeAnd(matchString51, matchString52);
        st1920.automaton.REstring rEstring55 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString47, matchString52);
        st1920.automaton.REstring rEstring56 = st1920.automaton.RegExpMatcher.makeRange(matchString43, matchString47);
        st1920.automaton.MatchString matchString57 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString58 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring59 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString58);
        st1920.automaton.REstring rEstring60 = st1920.automaton.RegExpMatcher.makeAnd(matchString57, matchString58);
        st1920.automaton.REstring rEstring61 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString43, matchString58);
        st1920.automaton.MatchString matchString62 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString42, matchString58);
        st1920.automaton.MatchString matchString63 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring64 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString63);
        st1920.automaton.REstring rEstring65 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString63);
        st1920.automaton.MatchString matchString66 = null;
        st1920.automaton.MatchString matchString67 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring68 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString66, matchString67);
        st1920.automaton.MatchString matchString69 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring70 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString69);
        st1920.automaton.REstring rEstring71 = st1920.automaton.RegExpMatcher.makeRange(matchString67, matchString69);
        st1920.automaton.REstring rEstring72 = st1920.automaton.RegExpMatcher.makeRange(matchString63, matchString69);
        st1920.automaton.MatchString matchString73 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring74 = st1920.automaton.RegExpMatcher.makeNot(matchString73);
        st1920.automaton.MatchString matchString75 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString76 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring77 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString76);
        st1920.automaton.REstring rEstring78 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString75, matchString76);
        st1920.automaton.MatchString matchString79 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString73, matchString75);
        st1920.automaton.REstring rEstring80 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString69, matchString79);
        st1920.automaton.REstring rEstring81 = st1920.automaton.RegExpMatcher.makeString(matchString79);
        st1920.automaton.REstring rEstring82 = st1920.automaton.RegExpMatcher.makeOccurences(matchString58, matchString79);
        st1920.automaton.MatchString matchString83 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring84 = st1920.automaton.RegExpMatcher.makeString(matchString83);
        st1920.automaton.REstring rEstring85 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString83);
        st1920.automaton.MatchString matchString86 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString87 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring88 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString87);
        st1920.automaton.REstring rEstring89 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString86, matchString87);
        st1920.automaton.REstring rEstring90 = st1920.automaton.RegExpMatcher.makeOr(matchString83, matchString87);
        st1920.automaton.MatchString matchString91 = null;
        st1920.automaton.MatchString matchString92 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring93 = st1920.automaton.RegExpMatcher.makeAnd(matchString91, matchString92);
        st1920.automaton.REstring rEstring94 = st1920.automaton.RegExpMatcher.makeNot(matchString92);
        st1920.automaton.MatchString matchString95 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring96 = st1920.automaton.RegExpMatcher.makeOr(matchString92, matchString95);
        st1920.automaton.REstring rEstring97 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString83, matchString95);
        boolean boolean98 = st1920.automaton.RegExpMatcher.matches(matchString79, rEstring97);
        st1920.automaton.REstring rEstring99 = st1920.automaton.RegExpMatcher.makeRange(matchString32, matchString79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring99);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeString(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString8, matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString4, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.MatchString matchString7 = null;
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString7, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRange(matchString8, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString10);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeNot(matchString14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString16, matchString17);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString16);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString10, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString20);
        st1920.automaton.MatchString matchString23 = null;
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString23, matchString24);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRange(matchString24, matchString26);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeX();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeT();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString5 = null;
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString5, matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString8, matchString12);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeB();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString6, matchString12, matchString14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeP();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString2, matchString3);
        st1920.automaton.MatchString matchString9 = null;
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString9, matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString9, matchString12);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString14, matchString15);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString18, matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurences(matchString17, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString2, matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurences(matchString1, matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeAnd(matchString4, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOr(matchString9, matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString10, matchString12);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeNot(matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString14);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString18, matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurences(matchString17, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeOr(matchString14, matchString20);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString12, matchString14);
        st1920.automaton.MatchString matchString24 = null;
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString25, matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString12, matchString24, matchString26);
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString30);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString29, matchString30);
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString33);
        st1920.automaton.MatchString matchString35 = null;
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeAnd(matchString35, matchString36);
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeNot(matchString36);
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString33, matchString36, matchString39);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString29, matchString39);
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString7, matchString12, matchString29);
        // The following exception was thrown during execution in test generation
        try {
            st1920.automaton.MatchString matchString43 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString2 = null;
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeN();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString9);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString4);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOr(matchString10, matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString10);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString4, matchString7, matchString10);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeAnd(matchString7, matchString8);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString8);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeString(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString15, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOr(matchString12, matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.make7();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRange(matchString16, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString20);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeOr(matchString8, matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.MatchString matchString7 = null;
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString7, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRange(matchString8, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString10);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeNot(matchString14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString16, matchString17);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString16);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString10, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString20);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makePattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString2 = null;
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString2, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRange(matchString3, matchString5);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString5);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeAnd(matchString9, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString5, matchString10);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString1, matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString16);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString10, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString2, matchString11);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString1, matchString2);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString19, matchString20);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString19);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString17);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString17);
        st1920.automaton.MatchString matchString27 = null;
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString27, matchString28);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString30);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeRange(matchString28, matchString30);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString30);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString35);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeAnd(matchString34, matchString35);
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString30, matchString35);
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeP();
        st1920.automaton.MatchString matchString40 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString41);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeAnd(matchString40, matchString41);
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString40);
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString39, matchString40);
        st1920.automaton.MatchString matchString46 = null;
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeAnd(matchString46, matchString47);
        st1920.automaton.MatchString matchString49 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.REstring rEstring50 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString46, matchString49);
        st1920.automaton.MatchString matchString51 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString40, matchString49);
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString35, matchString40);
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeAnd(matchString17, matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString3, matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOr(matchString12, matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOr(matchString7, matchString12);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString17 = null;
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString17, matchString18);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRange(matchString18, matchString20);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString25);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeAnd(matchString24, matchString25);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString20, matchString25);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRange(matchString16, matchString20);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString31);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeAnd(matchString30, matchString31);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString16, matchString31);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeNot(matchString16);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeOr(matchString12, matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        st1920.automaton.MatchString matchString12 = null;
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString12, matchString13);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRange(matchString13, matchString15);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRange(matchString9, matchString15);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString19);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString22, matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString9, matchString19, matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString8, matchString9);
        st1920.automaton.MatchString matchString27 = null;
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString9, matchString27, matchString28);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString4, matchString5, matchString9);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString2, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString2);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOr(matchString6, matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makePattern(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString3, matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString13 = null;
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString13, matchString14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRange(matchString14, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeAnd(matchString20, matchString21);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString16, matchString21);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeRange(matchString12, matchString16);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeAnd(matchString26, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString27);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString11, matchString27);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeOr(matchString7, matchString11);
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString34);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString33, matchString34);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString38);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString37, matchString38);
        st1920.automaton.MatchString matchString41 = null;
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeAnd(matchString38, matchString41);
        st1920.automaton.MatchString matchString43 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeAnd(matchString41, matchString43);
        st1920.automaton.MatchString matchString45 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString33, matchString43, matchString45);
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.MatchString matchString48 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeNot(matchString48);
        st1920.automaton.MatchString matchString50 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString51 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString51);
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString50, matchString51);
        st1920.automaton.MatchString matchString54 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString48, matchString50);
        st1920.automaton.MatchString matchString55 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString47, matchString54);
        st1920.automaton.REstring rEstring56 = st1920.automaton.RegExpMatcher.makeString(matchString54);
        st1920.automaton.REstring rEstring57 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString7, matchString43, matchString54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring57);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString10, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString2, matchString11);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString1, matchString2);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString19, matchString20);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString19);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString17);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString13, matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString10, matchString15);
        st1920.automaton.MatchString matchString17 = null;
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeAnd(matchString17, matchString18);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString17, matchString20);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString22, matchString23);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString26, matchString27);
        st1920.automaton.MatchString matchString30 = null;
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeAnd(matchString27, matchString30);
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeAnd(matchString30, matchString32);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString22, matchString32, matchString34);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString17, matchString22);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString17, matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeB();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString7, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNot(matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString16 = null;
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString16, matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRange(matchString17, matchString19);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString19);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeAnd(matchString23, matchString24);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString19, matchString24);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRange(matchString15, matchString19);
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString30);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeAnd(matchString29, matchString30);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString15, matchString30);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString30);
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString35);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString35, matchString37);
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString40 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeOr(matchString39, matchString40);
        st1920.automaton.MatchString matchString42 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeOr(matchString40, matchString42);
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeNot(matchString40);
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString35, matchString40);
        st1920.automaton.MatchString matchString46 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring47 = st1920.automaton.RegExpMatcher.makeString(matchString46);
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString46);
        st1920.automaton.MatchString matchString49 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString50 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString50);
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString49, matchString50);
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeOr(matchString46, matchString50);
        st1920.automaton.MatchString matchString54 = null;
        st1920.automaton.MatchString matchString55 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring56 = st1920.automaton.RegExpMatcher.makeAnd(matchString54, matchString55);
        st1920.automaton.REstring rEstring57 = st1920.automaton.RegExpMatcher.makeNot(matchString55);
        st1920.automaton.MatchString matchString58 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring59 = st1920.automaton.RegExpMatcher.makeOr(matchString55, matchString58);
        st1920.automaton.REstring rEstring60 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString46, matchString58);
        st1920.automaton.REstring rEstring61 = st1920.automaton.RegExpMatcher.makeString(matchString58);
        st1920.automaton.REstring rEstring62 = st1920.automaton.RegExpMatcher.makeOccurences(matchString35, matchString58);
        st1920.automaton.MatchString matchString63 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString34, matchString35);
        st1920.automaton.REstring rEstring64 = st1920.automaton.RegExpMatcher.makeOccurences(matchString13, matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring64);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = null;
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString1, matchString7);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNot(matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString13);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString10, matchString12);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString16);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOr(matchString16, matchString18);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString24 = null;
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString24, matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRange(matchString25, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString27);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString32);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeAnd(matchString31, matchString32);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString27, matchString32);
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString23, matchString32);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString21, matchString22, matchString23);
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeAnd(matchString20, matchString22);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString18, matchString22);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurences(matchString1, matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString11, matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString19 = null;
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString19, matchString20);
        st1920.automaton.MatchString matchString22 = null;
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeAnd(matchString22, matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeNot(matchString23);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurences(matchString1, matchString23);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeNot(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString2);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurences(matchString8, matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString5);
        st1920.automaton.MatchString matchString15 = null;
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString16, matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString3, matchString15, matchString17);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makePattern(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        boolean boolean4 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNot(matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString13, matchString14);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString11, matchString13);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString7, matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeNot(matchString20);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString22, matchString23);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString20, matchString22);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString19, matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRange(matchString17, matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeRange(matchString32, matchString33);
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString36);
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString36);
        st1920.automaton.MatchString matchString39 = null;
        st1920.automaton.MatchString matchString40 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString39, matchString40);
        st1920.automaton.MatchString matchString42 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString42);
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeRange(matchString40, matchString42);
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeRange(matchString36, matchString42);
        st1920.automaton.MatchString matchString46 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring47 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString46);
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString46);
        st1920.automaton.MatchString matchString49 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString50 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString51 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString49, matchString50);
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString36, matchString46, matchString51);
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString35, matchString36);
        st1920.automaton.MatchString matchString54 = null;
        st1920.automaton.MatchString matchString55 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring56 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString36, matchString54, matchString55);
        st1920.automaton.REstring rEstring57 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString31, matchString32, matchString36);
        st1920.automaton.REstring rEstring58 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring58);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString2, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString2);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotAnything();
        boolean boolean9 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOr(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString5);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeString(matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString13);
        boolean boolean15 = st1920.automaton.RegExpMatcher.matches(matchString11, rEstring14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString11, matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeH();
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString22);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString21, matchString22);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString25, matchString26);
        st1920.automaton.MatchString matchString29 = null;
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeAnd(matchString26, matchString29);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeAnd(matchString29, matchString31);
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString21, matchString31, matchString33);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeRange(matchString20, matchString31);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeOr(matchString16, matchString31);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString37, matchString38);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeString(matchString37);
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString42 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString42);
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString42);
        st1920.automaton.MatchString matchString45 = null;
        st1920.automaton.MatchString matchString46 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring47 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString45, matchString46);
        st1920.automaton.MatchString matchString48 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString48);
        st1920.automaton.REstring rEstring50 = st1920.automaton.RegExpMatcher.makeRange(matchString46, matchString48);
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeRange(matchString42, matchString48);
        st1920.automaton.MatchString matchString52 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString52);
        st1920.automaton.REstring rEstring54 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString52);
        st1920.automaton.MatchString matchString55 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString56 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString57 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString55, matchString56);
        st1920.automaton.REstring rEstring58 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString42, matchString52, matchString57);
        st1920.automaton.REstring rEstring59 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString41, matchString42);
        st1920.automaton.MatchString matchString60 = null;
        st1920.automaton.MatchString matchString61 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring62 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString42, matchString60, matchString61);
        st1920.automaton.MatchString matchString63 = null;
        st1920.automaton.MatchString matchString64 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring65 = st1920.automaton.RegExpMatcher.makeAnd(matchString63, matchString64);
        st1920.automaton.REstring rEstring66 = st1920.automaton.RegExpMatcher.makeNot(matchString64);
        st1920.automaton.REstring rEstring67 = st1920.automaton.RegExpMatcher.makeOccurences(matchString42, matchString64);
        st1920.automaton.REstring rEstring68 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString16, matchString37, matchString42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring68);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString4);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString8, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString9, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString11, matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeC();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRange(matchString11, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString5);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString8, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString9, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString15);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString18, matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString5, matchString15, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString23 = null;
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString5, matchString23, matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString1, matchString5);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeOccurences(matchString5, matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurences(matchString8, matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeN();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOr(matchString14, matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        java.lang.Class<?> wildcardClass3 = rEstring2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString7);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        st1920.automaton.MatchString matchString13 = null;
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString13, matchString14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRange(matchString14, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRange(matchString10, matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeNot(matchString20);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString22, matchString23);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString20, matchString22);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString16, matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeOr(matchString6, matchString26);
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString32 = null;
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString32, matchString33);
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString35);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeRange(matchString33, matchString35);
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString35);
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString40 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString40);
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeAnd(matchString39, matchString40);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString35, matchString40);
        st1920.automaton.MatchString matchString44 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString31, matchString40);
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString29, matchString30, matchString31);
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeRange(matchString6, matchString29);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = st1920.automaton.RegExpMatcher.matches(matchString1, rEstring46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: interval syntax error at position 76");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.MatchString matchString7 = null;
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString7, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRange(matchString8, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString10);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeNot(matchString14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString16, matchString17);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString16);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString10, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString1, matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeM();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeAnd(matchString11, matchString12);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString7, matchString12);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString12);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString2, matchString3);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        st1920.automaton.MatchString matchString19 = null;
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString19, matchString20);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString22);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRange(matchString20, matchString22);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString22);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeAnd(matchString26, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString22, matchString27);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeP();
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString33);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeAnd(matchString32, matchString33);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString32);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString31, matchString32);
        st1920.automaton.MatchString matchString38 = null;
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeAnd(matchString38, matchString39);
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString38, matchString41);
        st1920.automaton.MatchString matchString43 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString32, matchString41);
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString27, matchString32);
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString10, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString11);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeAnd(matchString7, matchString8);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString8);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString16 = null;
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString16, matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRange(matchString17, matchString19);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString19);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeAnd(matchString23, matchString24);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString19, matchString24);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString15, matchString24);
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString24, matchString29);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString29);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString29);
        boolean boolean33 = st1920.automaton.RegExpMatcher.matches(matchString12, rEstring32);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurences(matchString8, matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString15, matchString16);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString19, matchString20);
        st1920.automaton.MatchString matchString23 = null;
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeAnd(matchString20, matchString23);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeAnd(matchString23, matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString15, matchString25, matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString5, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makePattern(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString2, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString2);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOr(matchString6, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString14 = null;
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString14, matchString15);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRange(matchString15, matchString17);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString17);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString22);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeAnd(matchString21, matchString22);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString17, matchString22);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString13, matchString22);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString11, matchString12, matchString13);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeAnd(matchString10, matchString12);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString8, matchString12);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString31, matchString32);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeOccurences(matchString30, matchString33);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString33);
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeAnd(matchString33, matchString36);
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeNot(matchString38);
        st1920.automaton.MatchString matchString40 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString41);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString40, matchString41);
        st1920.automaton.MatchString matchString44 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString38, matchString40);
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString44);
        st1920.automaton.MatchString matchString46 = st1920.automaton.RegExpMatcher.makeH();
        st1920.automaton.REstring rEstring47 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString33, matchString44, matchString46);
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeOr(matchString8, matchString46);
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNot(matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString13, matchString14);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString11, matchString13);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString7, matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeNot(matchString20);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString22, matchString23);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString20, matchString22);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString19, matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRange(matchString17, matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString27);
        st1920.automaton.MatchString matchString30 = null;
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.MatchString matchString7 = null;
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString7, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRange(matchString8, matchString10);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString10);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeNot(matchString14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString16, matchString17);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString16);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString10, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeString(matchString20);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString20);
        st1920.automaton.MatchString matchString24 = null;
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString24, matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRange(matchString25, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString27);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeRange(matchString20, matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make7();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeAnd(matchString11, matchString12);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString7, matchString12);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString12);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString2, matchString3);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurences(matchString3, matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString22, matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurences(matchString21, matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString24);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeAnd(matchString24, matchString27);
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeNot(matchString29);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString32);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString31, matchString32);
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString29, matchString31);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString35);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeH();
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString24, matchString35, matchString37);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeRange(matchString3, matchString35);
        st1920.automaton.MatchString matchString40 = st1920.automaton.RegExpMatcher.makeC();
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString41);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString41);
        st1920.automaton.MatchString matchString44 = null;
        st1920.automaton.MatchString matchString45 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString44, matchString45);
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString47);
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeRange(matchString45, matchString47);
        st1920.automaton.REstring rEstring50 = st1920.automaton.RegExpMatcher.makeRange(matchString41, matchString47);
        st1920.automaton.MatchString matchString51 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString51);
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString51);
        st1920.automaton.MatchString matchString54 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString55 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString56 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString54, matchString55);
        st1920.automaton.REstring rEstring57 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString41, matchString51, matchString56);
        st1920.automaton.REstring rEstring58 = st1920.automaton.RegExpMatcher.makeString(matchString51);
        st1920.automaton.REstring rEstring59 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString40, matchString51);
        st1920.automaton.REstring rEstring60 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring60);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString4);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.make7();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeString(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString3, matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeString(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        boolean boolean4 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makePattern(matchString0);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString8, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString9, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString11, matchString16);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString11);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString22);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeAnd(matchString21, matchString22);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString7, matchString22);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString6, matchString22);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString2, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString2);
        java.lang.Class<?> wildcardClass7 = matchString0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makePattern(matchString0);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNot(matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString7);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString4, matchString6);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeString(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString14, matchString15);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOr(matchString11, matchString15);
        st1920.automaton.MatchString matchString19 = null;
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeAnd(matchString19, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeNot(matchString20);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeOr(matchString20, matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString11, matchString23);
        boolean boolean26 = st1920.automaton.RegExpMatcher.matches(matchString4, rEstring25);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString4);
        boolean boolean28 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeNot(matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString10, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString8, matchString10);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeH();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString3, matchString14, matchString16);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeNot(matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeAnd(matchString16, matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeB();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString7, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNot(matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString16 = null;
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString16, matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRange(matchString17, matchString19);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString19);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeAnd(matchString23, matchString24);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString19, matchString24);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRange(matchString15, matchString19);
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString30);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeAnd(matchString29, matchString30);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString15, matchString30);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString30);
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString35);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString35);
        st1920.automaton.MatchString matchString38 = null;
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString38, matchString39);
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString41);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeRange(matchString39, matchString41);
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeRange(matchString35, matchString41);
        st1920.automaton.MatchString matchString45 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeNot(matchString45);
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString48 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString48);
        st1920.automaton.REstring rEstring50 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString47, matchString48);
        st1920.automaton.MatchString matchString51 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString45, matchString47);
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString41, matchString51);
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeString(matchString51);
        st1920.automaton.REstring rEstring54 = st1920.automaton.RegExpMatcher.makeOccurences(matchString30, matchString51);
        st1920.automaton.REstring rEstring55 = st1920.automaton.RegExpMatcher.makeOccurences(matchString11, matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring55);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString4, matchString7, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString10, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString7, matchString10);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make0();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString1, matchString2);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString1);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeString(matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString2, matchString8);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString10);
        st1920.automaton.MatchString matchString12 = null;
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString10, matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make7();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeAnd(matchString11, matchString12);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString7, matchString12);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString12);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString2, matchString3);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurences(matchString3, matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeNot(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString1 = null;
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString9);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString9);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString14);
        st1920.automaton.MatchString matchString16 = null;
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeAnd(matchString16, matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString14, matchString17, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeOr(matchString13, matchString20);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString24 = null;
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString24, matchString25);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRange(matchString25, matchString27);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString27);
        st1920.automaton.MatchString matchString31 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString32);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeAnd(matchString31, matchString32);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString27, matchString32);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRange(matchString23, matchString27);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString38);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeAnd(matchString37, matchString38);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString23, matchString38);
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeNot(matchString23);
        st1920.automaton.MatchString matchString43 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString13, matchString23);
        st1920.automaton.MatchString matchString44 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeNot(matchString44);
        st1920.automaton.MatchString matchString46 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString47);
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString46, matchString47);
        st1920.automaton.MatchString matchString50 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString44, matchString46);
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString50);
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeOccurences(matchString43, matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeM();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString6 = null;
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString9);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString9);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeAnd(matchString13, matchString14);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString9, matchString14);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString5, matchString14);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString3, matchString4, matchString5);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString4);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString1, matchString2);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString22);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString22);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString2);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString5);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString8, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString9, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString15);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString18, matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString5, matchString15, matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString23 = null;
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString5, matchString23, matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString1, matchString5);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeOr(matchString27, matchString28);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeOr(matchString28, matchString30);
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeNot(matchString32);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString32);
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString36, matchString37);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeOccurences(matchString35, matchString38);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOr(matchString32, matchString38);
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString30, matchString32);
        st1920.automaton.MatchString matchString42 = null;
        st1920.automaton.MatchString matchString43 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString44 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString45 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString43, matchString44);
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString30, matchString42, matchString44);
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString48 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString48);
        st1920.automaton.REstring rEstring50 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString48);
        st1920.automaton.MatchString matchString51 = null;
        st1920.automaton.MatchString matchString52 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString51, matchString52);
        st1920.automaton.MatchString matchString54 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring55 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString54);
        st1920.automaton.REstring rEstring56 = st1920.automaton.RegExpMatcher.makeRange(matchString52, matchString54);
        st1920.automaton.REstring rEstring57 = st1920.automaton.RegExpMatcher.makeRange(matchString48, matchString54);
        st1920.automaton.MatchString matchString58 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring59 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString58);
        st1920.automaton.REstring rEstring60 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString58);
        st1920.automaton.MatchString matchString61 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString62 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString63 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString61, matchString62);
        st1920.automaton.REstring rEstring64 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString48, matchString58, matchString63);
        st1920.automaton.REstring rEstring65 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString47, matchString48);
        st1920.automaton.MatchString matchString66 = null;
        st1920.automaton.MatchString matchString67 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring68 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString48, matchString66, matchString67);
        st1920.automaton.REstring rEstring69 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString44, matchString48);
        st1920.automaton.MatchString matchString70 = null;
        st1920.automaton.MatchString matchString71 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring72 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString70, matchString71);
        st1920.automaton.MatchString matchString73 = null;
        st1920.automaton.MatchString matchString74 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring75 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString73, matchString74);
        st1920.automaton.MatchString matchString76 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString77 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring78 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString77);
        st1920.automaton.REstring rEstring79 = st1920.automaton.RegExpMatcher.makeAnd(matchString76, matchString77);
        st1920.automaton.MatchString matchString80 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring81 = st1920.automaton.RegExpMatcher.makeOr(matchString76, matchString80);
        st1920.automaton.MatchString matchString82 = st1920.automaton.RegExpMatcher.makeB();
        st1920.automaton.REstring rEstring83 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString74, matchString80, matchString82);
        st1920.automaton.REstring rEstring84 = st1920.automaton.RegExpMatcher.makeRange(matchString70, matchString82);
        st1920.automaton.MatchString matchString85 = null;
        st1920.automaton.MatchString matchString86 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring87 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString85, matchString86);
        st1920.automaton.MatchString matchString88 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring89 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString88);
        st1920.automaton.REstring rEstring90 = st1920.automaton.RegExpMatcher.makeRange(matchString86, matchString88);
        st1920.automaton.MatchString matchString91 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString92 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring93 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString88, matchString91, matchString92);
        st1920.automaton.REstring rEstring94 = st1920.automaton.RegExpMatcher.makeAnd(matchString70, matchString91);
        st1920.automaton.REstring rEstring95 = st1920.automaton.RegExpMatcher.makeAnd(matchString48, matchString70);
        st1920.automaton.REstring rEstring96 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString5, matchString70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring96);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeString(matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeJ();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeAt();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString2, matchString8);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeM();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString18 = null;
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString18, matchString19);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRange(matchString19, matchString21);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString21);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeAnd(matchString25, matchString26);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString21, matchString26);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString26);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString15, matchString16, matchString17);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeRange(matchString14, matchString16);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString12, matchString13, matchString14);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString3);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make0();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString1, matchString2);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString1);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString7);
        st1920.automaton.MatchString matchString10 = null;
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString10, matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRange(matchString11, matchString13);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString13);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeNot(matchString17);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString19, matchString20);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString19);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString13, matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeString(matchString23);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString23);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeString(matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeAnd(matchString4, matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString5);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString1, matchString5);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeString(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString12);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString5, matchString12);
        java.lang.Class<?> wildcardClass16 = matchString12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString2, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makePattern(matchString6);
        boolean boolean8 = st1920.automaton.RegExpMatcher.matches(matchString2, rEstring7);
        boolean boolean9 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring7);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNot(matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString13);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString10, matchString12);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeNot(matchString10);
        boolean boolean18 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeX();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeString(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString4, matchString5);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString5);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString4);
        st1920.automaton.MatchString matchString6 = null;
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOccurences(matchString4, matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeP();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeString(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString1);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString6 = null;
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString9);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString9, matchString12, matchString13);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeRange(matchString13, matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make2();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeNot(matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString3);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString12 = null;
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString12, matchString13);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRange(matchString13, matchString15);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString15);
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString20);
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeAnd(matchString19, matchString20);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString15, matchString20);
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString11, matchString20);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString9, matchString10, matchString11);
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeOccurences(matchString11, matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNot(matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString12, matchString13);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString10, matchString12);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString6, matchString16);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString18);
        st1920.automaton.MatchString matchString21 = null;
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString21, matchString22);
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeRange(matchString22, matchString24);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRange(matchString18, matchString24);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString6, matchString18);
        st1920.automaton.MatchString matchString29 = null;
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeAnd(matchString29, matchString30);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeNot(matchString30);
        st1920.automaton.MatchString matchString33 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeOr(matchString30, matchString33);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeOr(matchString18, matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString0);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString4);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeNot(matchString9);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString9, matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString16, matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurences(matchString15, matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOr(matchString12, matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString4, matchString5);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeAnd(matchString5, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString10, matchString12);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString15 = null;
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString15, matchString16);
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeRange(matchString16, matchString18);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString18);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeAnd(matchString22, matchString23);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString18, matchString23);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRange(matchString14, matchString18);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString29);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeAnd(matchString28, matchString29);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString14, matchString29);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString29);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeRange(matchString12, matchString29);
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString35);
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeP();
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString39);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeAnd(matchString38, matchString39);
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString38);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString37, matchString38);
        st1920.automaton.MatchString matchString44 = null;
        st1920.automaton.MatchString matchString45 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeAnd(matchString44, matchString45);
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString44, matchString47);
        st1920.automaton.MatchString matchString49 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString38, matchString47);
        st1920.automaton.MatchString matchString50 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString35, matchString49, matchString50);
        st1920.automaton.MatchString matchString52 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString12, matchString35);
        st1920.automaton.MatchString matchString53 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.MatchString matchString54 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString55 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString56 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString57 = null;
        st1920.automaton.MatchString matchString58 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring59 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString57, matchString58);
        st1920.automaton.MatchString matchString60 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring61 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString60);
        st1920.automaton.REstring rEstring62 = st1920.automaton.RegExpMatcher.makeRange(matchString58, matchString60);
        st1920.automaton.REstring rEstring63 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString60);
        st1920.automaton.MatchString matchString64 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString65 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring66 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString65);
        st1920.automaton.REstring rEstring67 = st1920.automaton.RegExpMatcher.makeAnd(matchString64, matchString65);
        st1920.automaton.REstring rEstring68 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString60, matchString65);
        st1920.automaton.MatchString matchString69 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString56, matchString65);
        st1920.automaton.REstring rEstring70 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString54, matchString55, matchString56);
        st1920.automaton.REstring rEstring71 = st1920.automaton.RegExpMatcher.makeRange(matchString53, matchString55);
        st1920.automaton.REstring rEstring72 = st1920.automaton.RegExpMatcher.makeOccurences(matchString35, matchString55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring72);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeV();
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString3, matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeAnd(matchString9, matchString10);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString6, matchString9);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makePattern(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString3 = null;
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString4);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRange(matchString4, matchString6);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString6);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString13, matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString10, matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeString(matchString10);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString10);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString11, matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring20 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = st1920.automaton.RegExpMatcher.matches(matchString1, rEstring20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeX();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeT();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString6 = null;
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString6, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeRange(matchString7, matchString9);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString9);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeAnd(matchString13, matchString14);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString9, matchString14);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString9);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makePattern(matchString0);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString6);
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString5, matchString6);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString9);
        st1920.automaton.MatchString matchString11 = null;
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeAnd(matchString11, matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeNot(matchString12);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString9, matchString12, matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString5, matchString15);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOr(matchString4, matchString5);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeAnd(matchString0, matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOr(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOr(matchString1, matchString3);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeNot(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString5);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOccurences(matchString8, matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOr(matchString5, matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString3, matchString5);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString18 = null;
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString18, matchString19);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString21);
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeRange(matchString19, matchString21);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString21);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeAnd(matchString25, matchString26);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString21, matchString26);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString26);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString15, matchString16, matchString17);
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeNot(matchString32);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString35);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString34, matchString35);
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString32, matchString34);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeNot(matchString32);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString15, matchString32);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString32);
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString0);
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeString(matchString0);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString0);
        st1920.automaton.MatchString matchString2 = null;
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeAnd(matchString2, matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRange(matchString0, matchString2);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeNot(matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString9);
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString8, matchString9);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString6, matchString8);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString12);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeOr(matchString12, matchString14);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makePlus();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString20 = null;
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString20, matchString21);
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString23);
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeRange(matchString21, matchString23);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString23);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString28);
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeAnd(matchString27, matchString28);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString23, matchString28);
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString19, matchString28);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString17, matchString18, matchString19);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeAnd(matchString16, matchString18);
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString14, matchString18);
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString37 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString37, matchString38);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeOccurences(matchString36, matchString39);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString39);
        st1920.automaton.MatchString matchString42 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeAnd(matchString39, matchString42);
        st1920.automaton.MatchString matchString44 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring45 = st1920.automaton.RegExpMatcher.makeNot(matchString44);
        st1920.automaton.MatchString matchString46 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString47);
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString46, matchString47);
        st1920.automaton.MatchString matchString50 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString44, matchString46);
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString50);
        st1920.automaton.MatchString matchString52 = st1920.automaton.RegExpMatcher.makeH();
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString39, matchString50, matchString52);
        st1920.automaton.REstring rEstring54 = st1920.automaton.RegExpMatcher.makeOr(matchString14, matchString52);
        boolean boolean55 = st1920.automaton.RegExpMatcher.matches(matchString0, rEstring54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString7);
        st1920.automaton.MatchString matchString9 = null;
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNot(matchString10);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString7, matchString10, matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString13);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurences(matchString1, matchString13);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makePattern(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring1 = st1920.automaton.RegExpMatcher.makeNot(matchString0);
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString2, matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString0, matchString2);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeOr(matchString6, matchString8);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeString(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeAnd(matchString1, matchString2);
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRange(matchString2, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString8, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRange(matchString9, matchString11);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString11);
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeAnd(matchString15, matchString16);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString11, matchString16);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString7, matchString16);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring22 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString21);
        st1920.automaton.MatchString matchString23 = null;
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring25 = st1920.automaton.RegExpMatcher.makeAnd(matchString23, matchString24);
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeNot(matchString24);
        st1920.automaton.MatchString matchString27 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString21, matchString24, matchString27);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeOr(matchString20, matchString27);
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString31 = null;
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString31, matchString32);
        st1920.automaton.MatchString matchString34 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring35 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString34);
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeRange(matchString32, matchString34);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString34);
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString39 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString39);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeAnd(matchString38, matchString39);
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString34, matchString39);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeRange(matchString30, matchString34);
        st1920.automaton.MatchString matchString44 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString45 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString45);
        st1920.automaton.REstring rEstring47 = st1920.automaton.RegExpMatcher.makeAnd(matchString44, matchString45);
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString30, matchString45);
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeNot(matchString30);
        st1920.automaton.MatchString matchString50 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString20, matchString30);
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString5, matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.makeO();
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeS();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOr(matchString8, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeQ();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeOr(matchString9, matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.make5();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeNot(matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString13);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString18 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString19 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString17, matchString18);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurences(matchString16, matchString19);
        st1920.automaton.REstring rEstring21 = st1920.automaton.RegExpMatcher.makeOr(matchString13, matchString19);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString11, matchString13);
        st1920.automaton.MatchString matchString23 = null;
        st1920.automaton.MatchString matchString24 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString24, matchString25);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString11, matchString23, matchString25);
        st1920.automaton.MatchString matchString28 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring30 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString29);
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString28, matchString29);
        st1920.automaton.MatchString matchString32 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString32);
        st1920.automaton.MatchString matchString34 = null;
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring36 = st1920.automaton.RegExpMatcher.makeAnd(matchString34, matchString35);
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeNot(matchString35);
        st1920.automaton.MatchString matchString38 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString32, matchString35, matchString38);
        st1920.automaton.REstring rEstring40 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString28, matchString38);
        st1920.automaton.REstring rEstring41 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString6, matchString11, matchString28);
        st1920.automaton.MatchString matchString42 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString42);
        st1920.automaton.REstring rEstring44 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString42);
        st1920.automaton.MatchString matchString45 = null;
        st1920.automaton.MatchString matchString46 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring47 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString45, matchString46);
        st1920.automaton.MatchString matchString48 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString48);
        st1920.automaton.REstring rEstring50 = st1920.automaton.RegExpMatcher.makeRange(matchString46, matchString48);
        st1920.automaton.REstring rEstring51 = st1920.automaton.RegExpMatcher.makeRange(matchString42, matchString48);
        st1920.automaton.MatchString matchString52 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring53 = st1920.automaton.RegExpMatcher.makeNot(matchString52);
        st1920.automaton.MatchString matchString54 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString55 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring56 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString55);
        st1920.automaton.REstring rEstring57 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString54, matchString55);
        st1920.automaton.MatchString matchString58 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString52, matchString54);
        st1920.automaton.REstring rEstring59 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString48, matchString58);
        st1920.automaton.REstring rEstring60 = st1920.automaton.RegExpMatcher.makeRange(matchString11, matchString48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring60);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeL();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString2 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString2);
        st1920.automaton.REstring rEstring4 = st1920.automaton.RegExpMatcher.makeOccurences(matchString0, matchString3);
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString3);
        st1920.automaton.MatchString matchString6 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString6);
        st1920.automaton.MatchString matchString8 = st1920.automaton.RegExpMatcher.make1();
        st1920.automaton.MatchString matchString9 = null;
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString9, matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString12);
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeRange(matchString10, matchString12);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString12);
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString17);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeAnd(matchString16, matchString17);
        st1920.automaton.REstring rEstring20 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString12, matchString17);
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString8, matchString17);
        st1920.automaton.MatchString matchString22 = st1920.automaton.RegExpMatcher.make6();
        st1920.automaton.REstring rEstring23 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString17, matchString22);
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString3, matchString17);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.makeX();
        st1920.automaton.MatchString matchString26 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString26);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makePattern(matchString26);
        st1920.automaton.REstring rEstring29 = st1920.automaton.RegExpMatcher.makeAnd(matchString25, matchString26);
        st1920.automaton.MatchString matchString30 = null;
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString25, matchString30);
        boolean boolean32 = st1920.automaton.RegExpMatcher.matches(matchString17, rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeStar();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString1);
        st1920.automaton.MatchString matchString4 = null;
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString4, matchString5);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString7);
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeRange(matchString5, matchString7);
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeRange(matchString1, matchString7);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString11);
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString11);
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.MatchString matchString15 = st1920.automaton.RegExpMatcher.makeOrSymbol();
        st1920.automaton.MatchString matchString16 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString14, matchString15);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString11, matchString16);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.REstring rEstring19 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString1);
        st1920.automaton.MatchString matchString20 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString21 = st1920.automaton.RegExpMatcher.makeR();
        st1920.automaton.MatchString matchString22 = null;
        st1920.automaton.MatchString matchString23 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring24 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString22, matchString23);
        st1920.automaton.MatchString matchString25 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring26 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString25);
        st1920.automaton.REstring rEstring27 = st1920.automaton.RegExpMatcher.makeRange(matchString23, matchString25);
        st1920.automaton.REstring rEstring28 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString25);
        st1920.automaton.MatchString matchString29 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString30 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring31 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString30);
        st1920.automaton.REstring rEstring32 = st1920.automaton.RegExpMatcher.makeAnd(matchString29, matchString30);
        st1920.automaton.REstring rEstring33 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString25, matchString30);
        st1920.automaton.REstring rEstring34 = st1920.automaton.RegExpMatcher.makeRange(matchString21, matchString25);
        st1920.automaton.MatchString matchString35 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString36 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring37 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString36);
        st1920.automaton.REstring rEstring38 = st1920.automaton.RegExpMatcher.makeAnd(matchString35, matchString36);
        st1920.automaton.REstring rEstring39 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString21, matchString36);
        st1920.automaton.MatchString matchString40 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString20, matchString36);
        st1920.automaton.MatchString matchString41 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring42 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString41);
        st1920.automaton.REstring rEstring43 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString41);
        st1920.automaton.MatchString matchString44 = null;
        st1920.automaton.MatchString matchString45 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring46 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString44, matchString45);
        st1920.automaton.MatchString matchString47 = st1920.automaton.RegExpMatcher.make9();
        st1920.automaton.REstring rEstring48 = st1920.automaton.RegExpMatcher.makeNotPattern(matchString47);
        st1920.automaton.REstring rEstring49 = st1920.automaton.RegExpMatcher.makeRange(matchString45, matchString47);
        st1920.automaton.REstring rEstring50 = st1920.automaton.RegExpMatcher.makeRange(matchString41, matchString47);
        st1920.automaton.MatchString matchString51 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring52 = st1920.automaton.RegExpMatcher.makeNot(matchString51);
        st1920.automaton.MatchString matchString53 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString54 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring55 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString54);
        st1920.automaton.REstring rEstring56 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString53, matchString54);
        st1920.automaton.MatchString matchString57 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString51, matchString53);
        st1920.automaton.REstring rEstring58 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString47, matchString57);
        st1920.automaton.REstring rEstring59 = st1920.automaton.RegExpMatcher.makeString(matchString57);
        st1920.automaton.REstring rEstring60 = st1920.automaton.RegExpMatcher.makeOccurences(matchString36, matchString57);
        st1920.automaton.MatchString matchString61 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString1, matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString61);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        st1920.automaton.MatchString matchString0 = null;
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeOccurencesAndMore(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeE();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrMore(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeAnd(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeOr(matchString3, matchString7);
        st1920.automaton.MatchString matchString9 = st1920.automaton.RegExpMatcher.makeB();
        st1920.automaton.REstring rEstring10 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString1, matchString7, matchString9);
        st1920.automaton.MatchString matchString11 = st1920.automaton.RegExpMatcher.makeG();
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNot(matchString11);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString14 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString14);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString13, matchString14);
        st1920.automaton.MatchString matchString17 = st1920.automaton.RegExpMatcher.makeConcatenation(matchString11, matchString13);
        st1920.automaton.REstring rEstring18 = st1920.automaton.RegExpMatcher.makeAnd(matchString7, matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring18);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeW();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeF();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString3 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring5 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString4);
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString4);
        st1920.automaton.MatchString matchString7 = st1920.automaton.RegExpMatcher.make8();
        st1920.automaton.REstring rEstring8 = st1920.automaton.RegExpMatcher.makeRepeatOneOrMore(matchString7);
        st1920.automaton.MatchString matchString9 = null;
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeNum();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString9, matchString10);
        st1920.automaton.REstring rEstring12 = st1920.automaton.RegExpMatcher.makeNot(matchString10);
        st1920.automaton.MatchString matchString13 = st1920.automaton.RegExpMatcher.makeD();
        st1920.automaton.REstring rEstring14 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString7, matchString10, matchString13);
        st1920.automaton.REstring rEstring15 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString3, matchString13);
        st1920.automaton.REstring rEstring16 = st1920.automaton.RegExpMatcher.makeOccurences(matchString1, matchString13);
        st1920.automaton.REstring rEstring17 = st1920.automaton.RegExpMatcher.makeString(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring17);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        st1920.automaton.MatchString matchString0 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString1 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring2 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString1);
        st1920.automaton.REstring rEstring3 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString0, matchString1);
        st1920.automaton.MatchString matchString4 = st1920.automaton.RegExpMatcher.makeDot();
        st1920.automaton.MatchString matchString5 = st1920.automaton.RegExpMatcher.makeHash();
        st1920.automaton.REstring rEstring6 = st1920.automaton.RegExpMatcher.makeRepeatZeroOrOne(matchString5);
        st1920.automaton.REstring rEstring7 = st1920.automaton.RegExpMatcher.makeFollowedBy(matchString4, matchString5);
        st1920.automaton.MatchString matchString8 = null;
        st1920.automaton.REstring rEstring9 = st1920.automaton.RegExpMatcher.makeAnd(matchString5, matchString8);
        st1920.automaton.MatchString matchString10 = st1920.automaton.RegExpMatcher.makeI();
        st1920.automaton.REstring rEstring11 = st1920.automaton.RegExpMatcher.makeAnd(matchString8, matchString10);
        st1920.automaton.MatchString matchString12 = st1920.automaton.RegExpMatcher.makeY();
        st1920.automaton.REstring rEstring13 = st1920.automaton.RegExpMatcher.makeOccurencesFromTo(matchString0, matchString10, matchString12);
        java.lang.Class<?> wildcardClass14 = rEstring13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(matchString12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(rEstring13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }
}

